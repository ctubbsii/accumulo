/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.accumulo.core.conf;

import static java.nio.charset.StandardCharsets.UTF_8;

import java.io.IOException;
import java.io.PrintStream;
import java.util.TreeMap;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonParser;

/**
 * This class generates documentation to inform users of the available configuration properties in a
 * presentable form.
 */
public class ConfigurationDocGen {
  private final PrintStream doc;
  private final TreeMap<String,Property> sortedProps = new TreeMap<>();
  private final Gson gsonPrettyPrinter =
      new GsonBuilder().setPrettyPrinting().disableJdkUnsafe().create();

  void generate() {
    pageHeader();

    beginTable("Property");
    for (Property prop : sortedProps.values()) {
      if (prop.getType() == PropertyType.PREFIX) {
        prefixSection(prop);
      } else {
        property(prop);
      }
    }
    endTable();

    beginSection("Property Types");
    beginTable("Type");
    propertyTypeDescriptions();
    endTable();

    doc.close();
  }

  void beginSection(String section) {
    doc.println("\n### " + section + "\n");
  }

  void beginTable(String name) {
    doc.printf("""
        <table>
          <thead>
            <tr>
              <th>%s</th>
              <th>Description</th>
            </tr>
          </thead>
          <tbody>
        """, name);
  }

  void endTable() {
    doc.println("""
          </tbody>
        </table>
        """);
  }

  void pageHeader() {
    doc.println("---");
    doc.println("title: Server Properties (4.x)");
    doc.println("category: configuration");
    doc.println("order: 4");
    doc.println("---\n");
    doc.println("<!-- WARNING: Do not edit this file. It is a generated file"
        + " that is copied from Accumulo build (from core/target/generated-docs) -->\n");
    doc.println("Below are properties set in `accumulo.properties` or the"
        + " Accumulo shell that configure Accumulo servers (i.e. tablet server,"
        + " manager, etc). Properties labeled 'Experimental' should not be considered stable"
        + " and have a higher risk of changing in the future.\n");
  }

  void prefixSection(Property prefix) {
    boolean depr = prefix.isDeprecated();
    String delStart = depr ? "<del>" : "";
    String delEnd = depr ? "</del>" : "";
    doc.printf("""
          <tr>
            <td>%s<a name="%sprefix" class="prop"></a> <strong>%s*</strong>%s</td>
            <td>%s<strong>Available since:</strong> %s<br>%s%s%s%s%s</td>
          </tr>
        """, delStart, prefix.getKey().replace(".", "_"), prefix.getKey(), delEnd,
        prefix.isExperimental() ? "<strong>&#9888;Experimental&#9888;</strong><br>" : "",
        prefix.availableSince(),
        depr ? "<em>Deprecated since:</em> " + prefix.deprecatedSince() + "<br>" : "",
        depr && prefix.isReplaced() ? String.format("""
            <em>Replaced by:</em> <a href="#%sprefix">%s</a><br>""",
            prefix.replacedBy().getKey().replace(".", "_"), prefix.replacedBy()) : "",
        delStart, replaceNewlinesWithBr(prefix.getDescription()), delEnd);
  }

  void property(Property prop) {
    boolean depr = prop.isDeprecated();
    String delStart = depr ? "<del>" : "";
    String delEnd = depr ? "</del>" : "";
    String availableSince = prop.getKey().startsWith("manager.")
        && (prop.availableSince().startsWith("1.") || prop.availableSince().startsWith("2.0"))
            ? "2.1.0 (formerly <em>master." + prop.getKey().substring(8) + "</em> since "
                + prop.availableSince() + ")"
            : prop.availableSince();
    String defaultValue = prop.getDefaultValue().trim();
    if (defaultValue.isEmpty()) {
      defaultValue = "empty";
    } else if (prop.getType() == PropertyType.CLASSNAME
        && defaultValue.startsWith("org.apache.accumulo")) {
      defaultValue = "{% jlink -f " + defaultValue + " %}";
    } else {
      defaultValue = switch (prop.getType()) {
        case JSON, FATE_META_CONFIG, FATE_USER_CONFIG -> String.format(
            """
                <div style="overflow: auto; resize: both; border: 1px solid; width: 600px;"><code class="language-json highlighter-rouge">%s</code></div>""",
            gsonPrettyPrinter.toJson(JsonParser.parseString(defaultValue)).replace(" ", "&nbsp;")
                .replace("\n", "<br>"));
        default -> String.format("""
            <code class="language-plaintext highlighter-rouge">%s</code>""", defaultValue);
      };
    }
    doc.printf(
        """
              <tr>
                <td>%s<a name="%s" class="prop"></a> %s%s</td>
                <td>%s<strong>Available since:</strong> %s<br>%s%s%s%s<br>
                  <strong>type: </strong>%s, <strong>zk mutable:</strong> %s, <strong>default value:</strong> %s%s</td>
              </tr>
            """,
        delStart, prop.getKey().replace(".", "_"), prop.getKey(), delEnd,
        prop.isExperimental() ? "<strong>&#9888;Experimental&#9888;</strong><br>" : "",
        availableSince, depr ? "<em>Deprecated since:</em> " + prop.deprecatedSince() + "<br>" : "",
        depr && prop.isReplaced() ? String.format("""
            <em>Replaced by:</em> <a href="#%s">%s</a><br>""",
            prop.replacedBy().getKey().replace(".", "_"), prop.replacedBy()) : "",
        delStart, replaceNewlinesWithBr(prop.getDescription()), prop.getType().toString(),
        isZooKeeperMutable(prop), defaultValue, delEnd);
  }

  void propertyTypeDescriptions() {
    for (PropertyType type : PropertyType.values()) {
      if (type != PropertyType.PREFIX) {
        doc.printf("""
              <tr>
                <td>%s<br>(%s)</td>
                <td>%s</td>
              </tr>
            """, type.name(), type.toString(), replaceNewlinesWithBr(type.getFormatDescription()));
      }
    }
  }

  String replaceNewlinesWithBr(String str) {
    return str.replace("\n", "<br>");
  }

  private ConfigurationDocGen(PrintStream doc) {
    this.doc = doc;
    for (Property prop : Property.values()) {
      this.sortedProps.put(prop.getKey(), prop);
    }
  }

  private String isZooKeeperMutable(Property prop) {
    if (!Property.isValidZooPropertyKey(prop.getKey())) {
      return "no";
    }
    if (Property.isFixedZooPropertyKey(prop)) {
      String shortname = prop.getKey().startsWith("compaction.coordinator.") ? "manager"
          : prop.getKey().split("[.]")[0];
      return "yes but requires restart of the " + shortname;
    }
    return "yes";
  }

  /**
   * Generates documentation for accumulo.properties file usage. Arguments are: "--generate-markdown
   * filename"
   *
   * @param args command-line arguments
   * @throws IllegalArgumentException if args is invalid
   */
  public static void main(String[] args) throws IOException {
    if (args.length == 2 && args[0].equals("--generate-markdown")) {
      try (var printStream = new PrintStream(args[1], UTF_8)) {
        new ConfigurationDocGen(printStream).generate();
      }
    } else {
      throw new IllegalArgumentException(
          "Usage: " + ConfigurationDocGen.class.getName() + " --generate-markdown <filename>");
    }
  }
}
